import http from "k6/http";
import { check, sleep } from "k6";
import { getAuthToken } from "../utils/auth.helper.ts";
import { Options } from "k6/options";

/*
* Average load test
Тест середнього навантаження оцінює, як система працює під типовим навантаженням. Типове навантаження може відповідати звичайному робочому дню у продакшені або середньостатистичному моменту роботи системи.
імітують кількість одночасних користувачів та запитів за секунду, які відповідають середній поведінці у продакшен-середовищі.
Зазвичай цей тип тестів поступово збільшує навантаження або кількість VUs та підтримує його протягом певного часу.
В залежності від особливостей системи, тест може завершитися раптово або мати короткий період зниження навантаження.

* average load тести повинні стати основою stress і soak тестуванню 
*/

/*
* Soak-тестування
 (тест на витривалість) є варіацією тесту із середнім навантаженням, але з акцентом на тривалі періоди тестування. Основні аспекти аналізу:

• Деградація продуктивності та споживання ресурсів протягом тривалого часу.
• Стабільність і доступність системи за умов тривалої роботи.

Головна відмінність soak-тесту від тесту із середнім навантаженням – тривалість випробувань. У soak-тесті період пікового навантаження (зазвичай на рівні середнього) може тривати годинами або навіть днями. Проте періоди нарощування (ramp-up) і зниження (ramp-down) навантаження залишаються такими ж, як у середньому тесті.

* У різних контекстах soak-тест також називають тестом на витривалість (endurance test), тестом постійного навантаження (constant high load test) або тестом на стабільність (stamina test).
*/

/*
* Spike-тестування 
перевіряє, чи витримує система раптові та масові стрибки навантаження, а також як вона працює в таких умовах.

Spike-тестування передбачає швидке зростання навантаження до екстремально високого рівня без або з мінімальним періодом нарощування (ramp-up).

• Період пікового навантаження зазвичай відсутній або дуже короткий, оскільки реальні користувачі в таких ситуаціях не затримуються для додаткових дій.

• Ramp-down (зниження навантаження) також відбувається миттєво або не використовується зовсім, дозволяючи протестувати лише один цикл навантаження.
*/

export const options: Options = {
  stages: [
    {
      duration: "10s",
      target: 2,
    }, // ramp-up
    {
      duration: "20s",
      target: 5,
    }, // ramp-up
    {
      duration: "3m",
      target: 8,
    }, // pick load
    {
      duration: "1m",
      target: 5, // ramp-down
    },
    {
      duration: "30s",
      target: 0, // shut-down
    },
  ],
};

// ОДИН РАЗ ПЕРЕД ЗАПУСКОМ ВСІХ ТЕСТІВ
export function setup() {
  const token = getAuthToken({
    username: "default",
    password: "12345678",
  });

  return { token }; // як обʼєкт!!!
}

export default function ({ token }) {
  const res = http.post(
    "https://quickpizza.grafana.com/api/pizza",
    JSON.stringify({
      maxCaloriesPerSlice: 1000,
      mustBeVegetarian: false,
      excludedIngredients: [],
      excludedTools: [],
      maxNumberOfToppings: 5,
      minNumberOfToppings: 2,
    }),
    {
      headers: {
        Authorization: `Token ${token}`,
      },
    }
  );

  check(res, {
    "Status-code": (res) => res.status == 200,
    "Request-duration": (res) => res.timings.duration < 300,
  });

  sleep(1);
}
